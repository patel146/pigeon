Dependencies
===========

Python 3.2.3

python3-dev package

SIP 4.15.1 - Python bindings for Qt.

Qt 5.2.1




System Dependencies
-------------------
* Python 3.2+
* Qt 5.2
* PyQt 5.2
* SIP 4.15+ - for PyQt's python bindings

### Ubuntu Install ###
On Ubuntu 14.04, you can install the following packages:
* qtdeclarative5-dev
* qtmultimedia5-dev
* python3-dev
* python3-pyqt5

### Non-Ubuntu / non-package-based install ###
Download the Qt5 installer first from http://qt-project.org/downloads

Download SIP.

Download PyQt.

### Setting up Python ###
This project requires Python 3.2.

### Install Qt5 ###
Use the provided graphical installer. 
Installing in your home directory is fine.

### Install SIP ###
Navigate to the directory where you downloaded SIP. Run the following:

> configure.py
> make
> make install 

### Install PyQt ###
Navigate to the directory where you downloaded PyQt.

Run configuration.py to generate the Makefile for PyQt. You'll need to specify where Qt's qmake file is for this to work. Run the following:

> configure.py --qmake /path/to/qmake

qmake should be in something like Qt-install-directory/Qt-version-number/Compiler-version/bin/qmake (eg. ~/Qt/5.2.1/gcc/bin/qmake). See the README in your Qt install directory for more details.

After that, run:

> make
> sudo make install

Afterwards, you may have to change your PYTHONPATH environment variable to point to the place in your system that PyQt5 is installed in order to use the module.
If you set up a python virtualenv for pigeon and installed PyQt5 while in the virtualenv, this will be in the virtualenv folder. (eg.~/Envs/pigeon-virtualenv/lib/python3.2/site-packages/PyQt5)
Otherwise, take a look at PyQt's configure.py to figure out where it installed itself.

Changing the PYTHONPATH can be done by putting
> export PYTHONPATH="/path/to/install/directory":$PYTHONPATH
in your ~/.profile or ~/.bashrc file.

To check your PYTHONPATH, open up a python session and type in:
> import sys
> print(sys.path)

External Modules
----------------
External projects that are needed for pigeon:
* restAssured - For all persistent data
* resty - For utilities to connect to the restAssured dataBase

Install restAssured:

    Requires Django Installation on your computer, as well as any Python 2.X.
    
    ##For Ubuntu just sudo apt-get install python-django##

    To get the source for restAssured clone it from:

        https://github.com/odeke-em/restAssured.git

        Please follow the intro in the main directory or view it online at:

            https://github.com/odeke-em/restAssured/blob/master/README.md

    Once Django is installed, and so is restAssured

    Go to directory restAssured's main directory and run the server like this:

        python manage.py runserver <desiredIp:port>

    ## Note that restAssured runs off Python 2.X.

## Using resty

    + resty is included as a submodule in pigeon.

    + To update it:

        ++ Go to src/

        ++ Pull in and activate the module if this is your first clone.

            +++ git submodule update --init resty 

        ++ To update resty:

            +++ Run: git submodule -q foreach git pull -q origin master

            +++ ** If need be, add the module after by: git add resty

            +++ Commit your changes and push for everyone to use.

Python Dependencies
-------------------
* pyproj - for UTM to lat lon conversion and other GIS needs
* shapely - for planar geometry calculations (ex. area)

The best way to install pyproj is via `pip`:
`sudo pip install pyproj`
The best way to install shapely is via `apt-get`:
`sudo apt-get install python3-shapely`

### Setting up a Python virtual environment ###
It is highly recommended that you set up a virtual environment when developing for pigeon (or for any other Python project)! 
A virtual environment for a Python project sets up a sandbox for that project with all the necessary Python modules that the project is dependent on.
(You can even switch between different Python interpreters!)

If you just want to work on this project without worrying about affecting other Python-based projects 
(which may have different versions of modules, libraries, python itself, etc...), 
you should set up a `virtualenv` before installing the modules listed above.

For more details, see the following links:
http://docs.python-guide.org/en/latest/dev/virtualenvs/

http://www.virtualenv.org/en/latest/index.html

http://virtualenvwrapper.readthedocs.org/en/latest/index.html

If you have the tool pip, you can install virtualenv easily:

```
pip install virtualenv
pip install virtualenvwrapper
```

I've also set up virtualenvwrapper in this example, which is a tool that organizes these virtual environments into one place.

To configure virtualenvwrapper, put the following in your `~/.bashrc`:

```
export WORKON_HOME=~/Envs
source /usr/local/bin/virtualenvwrapper.sh
```

This will create a new folder called ~/Envs to put all of your virtual environments in and activate all the virtualenvwrapper commands. You'll also want to put those lines in your ~/.bashrc or your ~/.profile or whatever shell startup script you have.

To create a new virtualenv, run:

`mkvirtualenv --system-site-packages -p /usr/bin/pythonx.x pigeon`

`--system-site-packages` is optional - it is only necessary if you want to use the python modules already installed on the system inside your virtualenv.
`-p /usr/bin/pythonx.x` is optional - it is only necessary if you want to use a different python interpreter than the system default.

To get in and out of your virtual environment:

```
workon pigeon-virtualenv
(install libraries, work on code, do stuff...)
deactivate
```

If you want to get rid of the virtual environment:
`rmvirtualenv pigeon-virtualenv`

